(() => {
    'use strict';

    /**
     * @ngdoc service
     * @name legendService
     * @module app.geo
     * @requires dependencies
     * @description
     *
     * The `legendService` factory constructs the legend (auto or structured). `LayerRegistry` instantiates `LegendService` providing the current config, layers and legend containers.
     * This service also scrapes layer symbology.
     *
     */
    angular
        .module('app.geo')
        .factory('legendService', legendServiceFactory);

    function legendServiceFactory($http, $q, $timeout, layerTypes, layerStates, legendEntryFactory) {
        const legendSwitch = {
            structured: structuredLegendService,
            autopopulate: autoLegendService
        };

        return (config, ...args) => legendSwitch[config.legend.type](config, ...args);

        /**
         * Constrcuts and maintains autogenerated legend.
         * @param  {Object} config current config
         * @param  {Object} layers object with layers from `layerRegistry`
         * @param  {Array} legend array for legend item from `layerRegistry`
         * @return {Object}        instance of `legendService` for autogenerated legend
         */
        function autoLegendService(config, layers, legend) {
            const ref = {
                dataGroup: legendEntryFactory.entryGroup('Data layers', true),
                imageGroup: legendEntryFactory.entryGroup('Image layers', true),
                legend: legend
            };

            // maps layerTypes to default layergroups
            const layerTypeGroups = {
                esriDynamic: ref.dataGroup,
                esriFeature: ref.dataGroup,
                esriImage: ref.imageGroup,
                esriTile: ref.imageGroup,
                ogcWms: ref.imageGroup
            };

            // maps layerTypes to layer item generators
            const layerTypeGenerators = {
                esriDynamic: dynamicGenerator,
                esriFeature: featureGenerator,
                esriImage: imageGenerator,
                esriTile: tileGenerator,
                ogcWms: imageGenerator
            };

            const service = {
                addLayer,
                removeLayer,
                setLayerState,
                setLayerLoadingFlag
            };

            init();

            return service;

            /***/

            /**
             * Initializes autolegend by adding data and image groups to it.
             */
            function init() {
                ref.legend.items.push(ref.dataGroup, ref.imageGroup);
                ref.legend.getLegendEntry = getLegendEntry;
            }

            /**
             * Creates a grouped layer toc entry (for dynamic and tile layers)
             * @param  {Object} layer layer object from the `layerRegistry`
             * @return {Object}       toc layer entry with hierarchy of sublayers and added symbology
             * @private
             */
            function createGroupedLayerEntry(layer, layerEntriesOptions = {}) {
                const dynamicGroup = legendEntryFactory.dynamicEntryMasterGroup(
                    layer.initialState, layer.layer, true);
                const layerEntryType = `${layer.initialState.layerType}LayerEntry`;
                layer.state = dynamicGroup;
                dynamicGroup.slaves = [];

                const symbologyPromise = getMapServerSymbology(layer);

                // generate all the slave sublayers upfornt ...
                layer.layer.layerInfos.forEach((layerInfo, index) => {
                    const layerEntryOptions = layerEntriesOptions[index] || {};

                    if (layerInfo.subLayerIds) { // group item
                        const groupItem = legendEntryFactory.dynamicEntryGroup({
                            name: layerInfo.name,
                            layerType: layerEntryType,
                            options: layerEntryOptions
                        });

                        assignDirectMaster(groupItem, layerInfo.parentLayerId);
                    } else { // leaf item
                        const layerItem = legendEntryFactory.dynamicEntryItem({
                            name: layerInfo.name,
                            layerType: layerEntryType,
                            options: layerEntryOptions
                        });

                        assignDirectMaster(layerItem, layerInfo.parentLayerId);
                    }
                });

                // wait for symbology to load and ...
                symbologyPromise
                    .then(({ data }) => { // ... and apply them to existing child items
                        data.layers.forEach(layer => applySymbology(dynamicGroup.slaves[layer.layerId], layer));
                    });

                // if there is no metadataurl, remove metadata options altogether
                if (typeof dynamicGroup.metadataUrl === 'undefined') {
                    delete dynamicGroup.options.metadata;
                    dynamicGroup.slaves.forEach(slave => delete slave.options.metadata);
                }

                return dynamicGroup;

                /**
                 * Finds direct parent of a child item in dynamic layer group and adds it to its items array.
                 * @param  {Object} item     layer or group item
                 * @param  {Number} masterId id of the direct parent
                 */
                function assignDirectMaster(item, masterId) {
                    item.master = dynamicGroup; // store a reference to the root group item of the dynamic layer
                    dynamicGroup.slaves.push(item); // store in slave reference array

                    if (masterId !== -1) {
                        dynamicGroup.slaves[masterId].add(item); // add to master's items list only if it's not the root
                    }
                }
            }

            /**
             * Parses a dynamic layer object and creates a legend item (with nested groups and symbology)
             * For a dynamic layer, there are two visibility functions:
             *     - `setVisibility`: https://developers.arcgis.com/javascript/jsapi/arcgisdynamicmapservicelayer-amd.html#setvisibility
             *      sets visibility of the whole layer; if this is set to false, using `setVisibleLayers` will not change anything
             *
             *  - `setVisibleLayers`: https://developers.arcgis.com/javascript/jsapi/arcgisdynamicmapservicelayer-amd.html#setvisiblelayers
             *      sets visibility of sublayers;
             *
             * A tocEntry for a dynamic layer contains subgroups and leaf nodes, each one with a visibility toggle.
             *  - User clicks on leaf's visibility toggle:
             *      toggle visibility of the leaf's layer item;
             *      notify the root group of this dynamic layer;
             *      walk root's children to find out which leaves are visible, omitting any subgroups
             *      call `setVisibleLayers` on the layer object to change the visibility of the layer
             *
             *  - User clicks on subgroup's visibility toggle:
             *      toggle visibility of the subgroup item;
             *      toggle all its children (prevent children from notifying the root when they are toggled)
             *      notify the root group of this dynamic layer;
             *      walk root's children to find out which leaves are visible, omitting any subgroups
             *      call `setVisibleLayers` on the layer object to change the visibility of the layer
             *
             *  - User clicks on root's visibility toggle:
             *      toggle all its children (prevent children from notifying the root when they are toggled)
             *      walk root's children to find out which leaves are visible, omitting any subgroups
             *      call `setVisibleLayers` on the layer object to change the visibility of the layer
             *
             * @param  {Object} layer layer object from `layerRegistry`
             * @return {Object}       legend item
             */
            function dynamicGenerator(layer) {
                // morph layerEntries array into an object where keys are indexes of sublayers
                const layerEntriesOptions = {};
                layer.initialState.layerEntries.forEach(layerEntry => {
                    layerEntriesOptions[layerEntry.index] = layerEntry;
                });

                const tocEntry = createGroupedLayerEntry(layer, layerEntriesOptions);

                // add to the legend only once that are specified
                // NOTE:  :point_up: [March 18, 2016 12:53 PM](https://gitter.im/RAMP-PCAR/TeamRoom?at=56ec3281bb4a1731739b0d33)
                // We assume the inclusion is properly formatted (ex: [1, 2] will result in sublayer 2 being included twice - once under root and once more time under 1).
                layer.state.layerEntries.forEach(({ index }) => {
                    const slave = tocEntry.slaves[index];
                    // if layerEntry id is incorrect, ignore it
                    if (slave) {
                        slave.setVisibility(slave.getVisibility(), false);

                        tocEntry.add(slave);
                    }
                });

                // set initial visibility of the sublayers;
                // this cannot be set in `layerRegistry` because legend entry for dynamic layer didn't exist yet;
                tocEntry._setVisibility();

                return tocEntry;
            }

            /**
             * Parses a tile layer object and creates a legend item (with nested groups and symbology)
             * Uses the same logic as dynamic layers to generate symbology hierarchy
             * @param  {Object} layer layer object from `layerRegistry`
             * @return {Object}       legend item
             */
            function tileGenerator(layer) {
                const tocEntry = createGroupedLayerEntry(layer);

                // add all tile sublayers to the toc entry
                tocEntry.slaves.forEach(slave => tocEntry.add(slave));

                return tocEntry;
            }

            /**
             * Parses feature layer object and create a legend entry with symbology
             * @param  {Object} layer layer object from `layerRegistry`
             * @return {Object}       legend item
             */
            function featureGenerator(layer) {
                // generate toc entry
                const state = legendEntryFactory.singleEntryItem(layer.initialState, layer.layer);
                layer.state = state;

                const symbologyPromise = getMapServerSymbology(layer);

                symbologyPromise.then(
                    ({ data, index }) => applySymbology(state, data.layers[index]));

                return state;
            }

            /**
             * Parses esri image layer object and create a legend entry with symbology
             * @param  {Object} layer layer object from `layerRegistry`
             * @return {Object}       legend item
             */
            function imageGenerator(layer) {
                // generate toc entry
                const state = legendEntryFactory.singleEntryItem(layer.initialState, layer.layer);
                layer.state = state;

                return state;
            }

            /**
             * Add a provided layer to the appropriate group;
             *
             * TODO: hide groups with no layers;
             * @param {Object} layer object from `layerRegistry` `layers` object
             */
            function addLayer(layer) {
                const layerType = layer.initialState.layerType;
                const entry = layerTypeGenerators[layerType](layer);

                layerTypeGroups[layerType].add(entry);
            }

            /**
             * Removes a provided layer from the appropriate group.
             * @param {Object} layer object from `layerRegistry` `layers` object
             */
            function removeLayer(layer) {
                layerTypeGroups[layer.state.layerType].remove(layer.state);
            }

            /**
             * Sets state of the layer entry: error, default, out-of-scale, etc
             * @param {Object} layer layer object from `layerRegistry`
             * @param {String} state defaults to `default`; state name
             * @param {Number} delay defaults to 0; delay before setting the state
             */
            function setLayerState(layer, state = layerStates.default, delay = 0) {
                const legendEntry = layer.state;

                // same as with map loading indicator, need timeout since it's a non-Angular async call
                $timeout.cancel(legendEntry.stateTimeout);
                legendEntry.stateTimeout = $timeout(() => {
                    legendEntry.state = state;

                    /*switch (state) {
                        case: layerStates
                    }*/
                }, delay);
            }

            /**
             * Sets `isLoading` flag on the legend entry.
             * @param {Object} layer layer object from `layerRegistry`
             * @param {Boolean} isLoading defaults to true; flag indicating if the layer is updating their content
             * @param {Number} delay defaults to 0; delay before setting the state
             */
            function setLayerLoadingFlag(layer, isLoading = true, delay = 0) {
                const legendEntry = layer.state;

                // same as with map loading indicator, need timeout since it's a non-Angular async call
                $timeout.cancel(legendEntry.loadingTimeout);
                legendEntry.loadingTimeout = $timeout(() => {
                    legendEntry.isLoading = isLoading;
                }, delay);
            }

            function getLegendEntry(id) {
                let result;

                ref.legend.items.forEach(entryGroup => {
                    entryGroup.walkItems(item => {
                        if (item.id === id) {
                            result = item;
                        }
                    });
                });

                return result;
            }
        }

        // TODO: maybe this should be split into a separate service; it can get messy otherwise in here
        function structuredLegendService() {

        }

        /**
         * TODO: Work in progress... Works fine for feature layers only right now; everything else gest a generic icon;
         * TODO: move to geoapi as it's stateless and very specific
         * Scrapes feaure and dynamic layers for their symbology;
         *
         * * data.layers [
         *     {
         *         layerId: Number,
         *         legend: Array
         *     },
         *     ...
         * ]
         * @param  {Object} layer layer object from `layerRegistry`
         */
        function getMapServerSymbology(layer) {
            const reg = /(.+?)(\/(\d))?$/; // separate layer id from the rest of the url
            const url = layer.state.url.replace(/\/+$/, ''); // strip trailing slashes

            // jscs also doesn't like fancy destructuring
            // jscs:disable requireSpaceAfterComma
            const [, legendUrl,, index = -1] = reg.exec(url); // https://babeljs.io/docs/learn-es2015/#destructuring
            // jscs:enable requireSpaceAfterComma

            return $http.jsonp(`${legendUrl}/legend?f=json&callback=JSON_CALLBACK`)
                .then(result => {
                    // console.log(legendUrl, index, result);

                    if (result.data.error) {
                        return $q.reject(result.data.error);
                    }
                    return {
                        data: result.data,
                        index
                    };
                })
                .catch(error => {
                    // TODO: apply default symbology to the layer in question in this case
                    console.error(error);
                });
        }

        /**
         * Applies retrieved symbology to the layer item's state
         * @param  {Object} state     layer item
         * @param  {Object} layerData data from the legend endpoint
         */
        function applySymbology(state, layerData) {
            state.symbology = layerData.legend.map(item => {
                return {
                    icon: `data:${item.contentType};base64,${item.imageData}`,
                    name: item.label
                };
            });
        }
    }
})();
