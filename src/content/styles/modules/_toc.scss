@mixin toc {
    .rv-toc {
        @include layer-list;
    }
}

@mixin layer-list {
    .rv-layer-level {
        // relative boxes list shadow to the current list
        position: relative;

        .rv-layer-list-divider {
            position: absolute;
            right: -8px;
        }

        @for $i from 0 to 10 {
            @include layer-level-step($i);
        }
    }

    .rv-layer-list {
        list-style: none;
        //padding: 0 0 0 rem(1);
        padding: 0;
        max-width: 100%;
        overflow: hidden; // to hide scrollbars when animating layer items

        > li {
            // TODO: move to a separate file maybe or a separate mixin
            $du: $swift-ease-in-duration;
            $de: $swift-ease-in-duration * 0.3;

            &.ng-enter {
                transition: transform $du + $de $swift-ease-in-out-timing-function $de,
                            margin $du $swift-ease-in-out-timing-function 0s;
            }

            &.ng-leave {
                transition: transform $du $swift-ease-in-out-timing-function 0s,
                            margin $du + $de $swift-ease-in-out-timing-function $de;
            }

            &.ng-enter {
                transform: translate3d(100%, 0, 0);
                margin-bottom: - rem(4.8); // make sure it matches layer item height
            }

            &.ng-leave-active {
                transform: translate3d(-100%, 0, 0);
                margin-bottom: - rem(4.8); // make sure it matches layer item height
            }

            &.ng-enter-active {
                transform: translate3d(0, 0, 0);
                margin-bottom: 0;
            }

            &.ng-enter-stagger,
            &.ng-leave-stagger {
                transition-duration: 0;
                transition-delay: 200ms;
            }
        }
        // rotate the icon on the toggle button on open
        .md-toggle-icon {
            transition: transform $swift-ease-in-duration $swift-ease-in-out-timing-function;

            &.rv-toggled {
                transform: rotate(90deg);
            }
        }
        // need to hide overflow during open/close animations so the layer list content displays properly
        &.ng-animate {
            overflow: hidden;
            // prevent toggle icon from animationg during list animation
            .md-toggle-icon {
                transition: none;
            }
        }
        // do not add padding to the root level layer list
        &.rv-root {
            padding-left: 0;
            margin: 0;
        }

        &.ng-hide + .rv-shadow {
            // hide list shadow when the layer list is closed; otherwise, it will still be visilbe
            background-color: transparent !important;
        }

        @include layer-group-toggle;
        @include layer-item;
    }
    // rv-shadow is a thin guideline drawn on the right side of the list when group toggle is hovered over;
    // it helps to visualize which layers will be affected by the group toggle
    .rv-shadow {
        position: absolute;
        right: rem(-0.8);
        top: 0;
        bottom: 0;
        width: rem(0.3);
        opacity: 0.45;
        background-color: transparent;
        transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
    }
}
// http://krasimirtsonev.com/blog/article/Two-handy-and-advanced-SASS-features-and-their-limitations
// adjust layer item, layer group toggle, and layer list divider indent
@mixin layer-level-step($index) {
    &.rv-#{$index} {
        rv-layer-item .rv-layer-item-inner-container {
            padding-left: rem(0.8) * ($index + 1);
        }

        rv-layer-group-toggle .rv-layer-group-body-button {
            padding-left: rem(0.8) * ($index + 1);
        }

        .rv-layer-list-divider {
            left: rem(0.8) * ($index - 1);
        }
    }
}
/*
absolutely position a button underneath an item so it acts like a button body for the item; add content to it using aria labels; make the actual text not pronounceable by aria as well or something like that. this should work for both layer items and layer group toggles;
*/
@mixin layer-group-toggle {
    $toggleHeight: rem(4.0);

    rv-layer-group-toggle {
        height: $toggleHeight;
        position: relative;
        display: flex;
        align-items: center;

        .md-button {
            margin: 0;
        }
        // setting layer list shadow color when hover over layer group toggle
        &:hover ~ .rv-shadow {
            background-color: $primary-color;
        }

        .rv-layer-group-body-button {
            text-align: left;
            position: absolute;
            padding: 0;
            margin: 0;
            top: 0; // anchor the button to its parent container
            left: - rem(0.8);
            width: calc(100% + #{rem(1.6)});

            .rv-primary {
                line-height: $toggleHeight;
            }

            .md-toggle-icon {
                display: inline-block; // why? http://stackoverflow.com/a/25667784
            }
        }

        .rv-layer-group-controls {}
    }
}

@mixin layer-item {
    rv-layer-item {
        @include layer-item-symbology;
        display: block;

        .rv-layer-item-inner-container {
            display: flex;
            align-items: center;
            height: rem(4.8);
            position: relative;

            rv-layer-item-button .md-button {
                margin: 0;
            }
            // visually highlights selected layer item in the list
            &.rv-selected {
                // don't hide toggles on a selected layer
                .rv-layer-item-toggles > md-menu {
                    display: inline; // IE doesn't support `initial`
                }

                &:before {
                    background-color: $accent-color;
                }
            }
            // selection indicator
            &:before {
                position: absolute;
                content: "";
                background-color: transparent;
                width: rem(0.3);
                right: - rem(0.8);
                height: 100%;
                top: 0;
                transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
            }
        }

        .rv-layer-body-button {
            text-align: left;
            position: absolute;
            padding: 0;
            margin: 0;
            // makes the button appear to be a bit larger on the left size
            // #{...} is a way to include variables and functions in `calc`: http://stackoverflow.com/a/20236515
            width: calc(100% + #{rem(1.6)});
            left: - rem(0.8);
            top: 0;
            bottom: 0;
        }

        .rv-layer-item-content {
            flex: 1; // content tries to take all available space
            min-width: 0; // Firefox fix for flexbox not wanting to shrink: http://stackoverflow.com/a/31349707
            margin-right: rem(1.0);

            .rv-layer-item-name {
                font-size: rem(1.6);
                // truncate layer name if it's too long
                overflow: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
            }

            .rv-layer-item-flag {
                display: inline-block;
                margin: rem(0.1) rem(0.2);
                // main layer item button was overlapting the flag
                position: relative; // why? http://philipwalton.com/articles/what-no-one-told-you-about-z-index/
            }
        }
        // hide layer toggles except the visibility toggle
        .rv-layer-item-toggles > md-menu {
            &:not([name='visibility']) {
                display: none;
            }
        }
        // TODO: fix
        &.error {
            .rv-layer-item-toggles > md-menu {
                display: inline-block;
            }
        }

        &:hover {
            .rv-layer-item-toggles > md-menu {
                display: inline-block;
            }
        }
    }
}

@mixin layer-item-symbology {
    .rv-layer-item-icon {
        margin: 0 rem(0.5) 0 0;
        height: rem(3.2);
        width: rem(3.2);
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 0; // set up new stacking context

        .rv-symbology-trigger {
            // button which opens symbology section
            transition: opacity $swift-ease-in-duration $swift-ease-in-out-timing-function;
            opacity: 0;
            z-index: 4;
            margin: 0;
        }

        .rv-symbology-item {
            position: absolute;

            .rv-symbology-item-name {
                opacity: 0;
                display: none;
            }
        }

        &.rv-expanded {
            // show the trigger (close) button when the symbology section is open
            .rv-symbology-trigger {
                opacity: 1;
            }
        }

        &.rv-single {
            .rv-symbology-item {
                position: relative;
            }
        }

        &.rv-compound .rv-symbology-container {
            img {
                width: rem(3.2) - 2px;
                height: rem(3.2) - 2px;
            }

            .rv-symbology-item {
                // this block will move items 4 and up underneath the stack
                top: 1px;
                left: 1px;
                z-index: 0;
                // the following arranges the first three items in a visible stack
                &:first-child {
                    z-index: 3;
                    top: -1px;
                    left: -1px;
                }

                &:nth-child(2) {
                    z-index: 2;
                    top: 1px;
                    left: 1px;
                }

                &:last-child {
                    z-index: 1;
                    top: 3px;
                    left: 3px;
                }
            }
        }
    }
}
